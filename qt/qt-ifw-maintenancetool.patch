diff --git a/src/libs/installer/packagemanagercore_p.cpp b/src/libs/installer/packagemanagercore_p.cpp
index 29c3fb03..06e48020 100644
--- a/src/libs/installer/packagemanagercore_p.cpp
+++ b/src/libs/installer/packagemanagercore_p.cpp
@@ -1064,12 +1064,19 @@ void PackageManagerCorePrivate::writeMaintenanceToolBinary(QFile *const input, q
                 dummy.errorString()));
         }
     }
-
+#if 0
     if (!out.copy(maintenanceToolRenamedName)) {
         throw Error(tr("Cannot write maintenance tool to \"%1\": %2").arg(maintenanceToolRenamedName,
             out.errorString()));
     }
-
+#else
+    out.flush();
+    out.close();
+    QFile src(out.fileName());
+    if (!src.copy(maintenanceToolRenamedName)) {
+   qDebug() << out.errorString();
+   }
+#endif
     QFile mt(maintenanceToolRenamedName);
     if (mt.setPermissions(out.permissions() | QFile::WriteUser | QFile::ReadGroup | QFile::ReadOther
                           | QFile::ExeOther | QFile::ExeGroup | QFile::ExeUser)) {
@@ -1358,7 +1365,7 @@ void PackageManagerCorePrivate::writeMaintenanceTool(OperationList performedOper
                 throw Error(tr("Cannot remove data file \"%1\": %2").arg(dummy.fileName(),
                     dummy.errorString()));
             }
-
+#if 0
             if (!file.rename(dataFile + QLatin1String(".new"))) {
                 throw Error(tr("Cannot write maintenance tool binary data to %1: %2")
                     .arg(file.fileName(), file.errorString()));
@@ -1366,6 +1373,17 @@ void PackageManagerCorePrivate::writeMaintenanceTool(OperationList performedOper
             file.setAutoRemove(false);
             file.setPermissions(file.permissions() | QFile::WriteUser | QFile::ReadGroup
                 | QFile::ReadOther);
+#else
+    file.flush();
+    QFile tmpfr(file.fileName());
+    if (!tmpfr.copy(dataFile + QLatin1String(".new"))) {
+    throw Error(tr("Cannot write maintenance tool binary data to %1: %2")
+    .arg(file.fileName(), file.errorString()));
+    }
+    QFile tmpfr2(dataFile + QLatin1String(".new"));
+    tmpfr2.setPermissions(file.permissions() | QFile::WriteUser | QFile::ReadGroup
+    | QFile::ReadOther);
+#endif
         } catch (const Error &/*error*/) {
             if (!newBinaryWritten) {
                 newBinaryWritten = true;
